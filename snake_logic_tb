`timescale 1ns / 1ps
////////////////////////////////////////////////////////////////////////////////// 
// Engineer: Kyle Wyckoff
// 
// Create Date: 12/08/2024 11:41:29 AM
// Design Name: 
// Module Name: snake_logic_tb
// Project Name: basic_snake
// Target Devices: Nexys A7-100T
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module snake_logic_tb();

    //UUT Variables
    reg clk_tb;
    reg reset_tb;
    reg [1:0] direction_tb;
    reg foodEaten_tb;
    wire [9:0] headX_tb, headY_tb;
    wire [4:0] snakeLength_tb;
    wire [49:0] bodyX_tb, bodyY_tb;
    
    //Check variables
    reg [1:0] directionCheck;
    reg [9:0] headXCheck, headYCheck;
    reg [4:0] snakeLengthCheck;
    wire [49:0] bodyXCheck, bodyYCheck;
    reg positionCheck;


    snake_logic UUT(
        .clk(clk_tb),
        .reset(reset_tb),
        .direction(direction_tb),   // 00=up, 01=right, 10=down, 11=left
        .food_eaten(foodEaten_tb),
        .head_x(headX_tb),
        .head_y(headY_tb),
        .snake_length(snakeLength_tb),
        .body_x(bodyX_tb),
        .body_y(bodyY_tb)
    );
    
    
    integer i;
    parameter SCREEN_WIDTH = 640;
    parameter SCREEN_HEIGHT = 480;
    parameter SNAKE_STEP = 10;
    
    reg [9:0] body_x_a [4:0];
    reg [9:0] body_y_a [4:0];
    reg [9:0] bodyX_aCheck [4:0];
    reg [9:0] bodyY_aCheck [4:0];

//    genvar j;
//    generate
//        for (j = 0; j < 5; j = j + 1) begin : flatten_snake
//            assign bodyX_tb   [10*j +: 10] = body_x_a[j];
//            assign bodyY_tb   [10*j +: 10] = body_y_a[j];
           
//        end
//    endgenerate
    
    
    genvar k;
    generate
        for (k = 0; k < 5; k = k + 1) begin : flatten_snakeCheck
          
            assign bodyXCheck [10*k +: 10] = bodyX_aCheck[k];
            assign bodyYCheck [10*k +: 10] = bodyY_aCheck[k];
        end
    endgenerate
    
     // Clock Generation
    initial begin
        clk_tb = 0;
        forever #5 clk_tb = ~clk_tb; // 100MHz clock, period = 10ns
    end
    
    
    //Tests
    initial begin 
    
   //First test the initial states and positions
        
        //Simulate game starting through toggling reset
        reset_tb = 1;
        #10;
        reset_tb = 0;
        direction_tb = 2'b01;
        foodEaten_tb = 0;
        #10;
        for (i = 0; i < 5; i = i+1) begin
           bodyX_aCheck[i] <= 0;
           bodyY_aCheck[i] <= 0;
           body_x_a[i] <= 0;
           body_y_a[i] <= 0;
        end
        headXCheck <= SCREEN_WIDTH / 2;
        headYCheck <= SCREEN_HEIGHT / 2;
        snakeLengthCheck <= 2'b11;
        
        
        //Check initial direction
        directionCheck = 2'b01;
        //Check inital head and body positions with positions we have initialized
        //If positionCheck signal is on, the test passes
        positionCheck = (headXCheck | headX_tb) 
                      | (headYCheck | headY_tb)
                      | (bodyXCheck | bodyX_tb)
                      | (bodyYCheck | bodyY_tb);
         #50;             
        
        
        //Next test the movement for each direction input
        //and compare position to expected position
            //UP direction test
            
            //DOWN direction test
            
            //LEFT direction test
            
            //RIGHT direction test
        
        //Test food being eaten growing the snake
        
        
        
        
        
        
        
    
    end
   



endmodule
