`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: California State Univerity, Long Beach 
// Engineer: Bronson Garel
// 
// Create Date: 12/09/2024 04:22:41 PM
// Design Name: 
// Module Name: vga_controller
// Project Name: Snake Game
// Target Devices: Nexys A7-100T
// Tool Versions: Vivado 2024.1
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module vga_controller(
    input clk,          // Internal Nexys A7-100T clock
    input reset,        // Reset
    output video_on,    // ON while pixel counts for x and y and within display area
    output hsync,       // Horizontal sync
    output vsync,       // Vertical sync
    output p_tick,      // the 25MHz pixel/second rate signal, pixel tick
    output [9:0] x,     // Pixel count/position of pixel x, max 0-799
    output [9:0] y      // Pixel count/position of pixel y, max 0-524
    );
    
    // Based on VGA standards found at vesa.org for 640x480 resolution
    // Horizontal width of screen: 800 pixels
    parameter HD = 640;             // Horizontal display area width in pixels
    parameter HF = 48;              // Horizontal front porch width in pixels
    parameter HB = 16;              // Horizontal back porch width in pixels
    parameter HR = 96;              // Horizontal retrace width in pixels
    parameter HMAX = HD+HF+HB+HR-1; // Max value of horizontal counter = 799
    // Vertical length of screen: 525 pixels
    parameter VD = 480;             // Vertical display area length in pixels 
    parameter VF = 10;              // Vertical front porch length in pixels  
    parameter VB = 33;              // Vertical back porch length in pixels   
    parameter VR = 2;               // Vertical retrace length in pixels  
    parameter VMAX = VD+VF+VB+VR-1; // Max value of vertical counter = 524   
    
    // *** Generate 25MHz from 100MHz *********************************************************
	reg  [1:0] clk_25MHz;
	wire w_clk_25MHz;
	
	always @(posedge clk or posedge reset) begin
		if(reset) begin
		  clk_25MHz <= 0;
		end
		else begin
		  clk_25MHz <= clk_25MHz + 1;
		end
	end
	
	assign w_clk_25MHz = (clk_25MHz == 0) ? 1 : 0; // assert tick 1/4 of the time
    // ****************************************************************************************
    
    // Counter Registers, two each for buffering to avoid glitches
    reg [9:0] h_count_reg, h_count_next;
    reg [9:0] v_count_reg, v_count_next;
    
    // Output Buffers
    reg v_sync_reg, h_sync_reg;
    wire v_sync_next, h_sync_next;
    
    // Register Control
    always @(posedge clk or posedge reset)
        if(reset) begin
            v_count_reg <= 0;
            h_count_reg <= 0;
            v_sync_reg  <= 1'b0;
            h_sync_reg  <= 1'b0;
        end
        else begin
            v_count_reg <= v_count_next;
            h_count_reg <= h_count_next;
            v_sync_reg  <= v_sync_next;
            h_sync_reg  <= h_sync_next;
        end
         
    // Logic for horizontal counter
    always @(posedge w_clk_25MHz or posedge reset)
        if(reset)
            h_count_next = 0;
        else
            if(h_count_reg == HMAX)                 // end of horizontal scan
                h_count_next = 0;
            else
                h_count_next = h_count_reg + 1;         
  
    // Logic for vertical counter
    always @(posedge w_clk_25MHz or posedge reset)
        if(reset)
            v_count_next = 0;
        else
            if(h_count_reg == HMAX)                 // end of horizontal scan
                if((v_count_reg == VMAX))           // end of vertical scan
                    v_count_next = 0;
                else
                    v_count_next = v_count_reg + 1;
        
    assign h_sync_next = (h_count_reg >= (HD+HB) && h_count_reg <= (HD+HB+HR-1));
    assign v_sync_next = (v_count_reg >= (VD+VB) && v_count_reg <= (VD+VB+VR-1));
    assign video_on = (h_count_reg < HD) && (v_count_reg < VD); 
            
    // Outputs
    assign hsync  = h_sync_reg;
    assign vsync  = v_sync_reg;
    assign x      = h_count_reg;
    assign y      = v_count_reg;
    assign p_tick = w_clk_25MHz;
            
endmodule
