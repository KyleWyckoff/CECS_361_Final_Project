`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Kyle Wyckoff
// 
// Create Date: 10/22/2024 04:28:26 PM
// Design Name: 
// Module Name: VGA_Display
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module VGA_Display(
    input wire clk, reset,
    output wire hsync, vsync, videoOn,
    output reg [9:0] x, y  //x-cord range = 0-639, 10 bits will cover this range
);
    //Timing parameters for 640x480 at 60Hz clk signal
    //horizontal synchronization signal parameters
    parameter ACTIVE_VIDEO_HEIGHT = 640;   //# of horizontal pixels
    parameter hsync_fp     = 16;    //blanking period before sync pulse
    parameter HSYNC_PULSE_WIDTH  = 96;    //captures input from the FPGA
    parameter hsync_bp     = 48;    //blanking period after sync pulse
    parameter HSYNC_TOTAL  = 800;    //total horizontal time
 
    //vertical synchronization signal parameters
    parameter ACTIVE_VIDEO_WIDTH = 480;   //# of vertical pixels
    parameter vsync_fp     = 10;    //blanking period before sync pulse
    parameter VSYNC_PULSE_WIDTH  = 2;     //captures input from the FPGA
    parameter vsync_bp     = 33;    //blanking period after sync pulse
    parameter VSYNC_TOTAL  = 526;

    reg [9:0] h_count, v_count;
    
        // Horizontal and Vertical Sync Logic
    assign hsync = ~(h_count < HSYNC_PULSE_WIDTH);  // Active low sync pulse
    assign vsync = ~(v_count < VSYNC_PULSE_WIDTH);  // Active low sync pulse
    assign video_on = (h_count < ACTIVE_VIDEO_WIDTH) && (v_count < ACTIVE_VIDEO_HEIGHT);

    // Update pixel_x and pixel_y for active video region
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Reset counters and pixel coordinates
            h_count <= 0;
            v_count <= 0;
            x <= 0;
            y <= 0;
        end else begin
            // Increment horizontal counter
            if (h_count < HSYNC_TOTAL - 1)
                h_count <= h_count + 1;
            else
                h_count <= 0; // Reset at end of horizontal cycle

            // Increment vertical counter after full horizontal cycle
            if (h_count == HSYNC_TOTAL - 1) begin
                if (v_count < VSYNC_TOTAL - 1)
                    v_count <= v_count + 1;
                else
                    v_count <= 0; // Reset at end of vertical cycle
            end

            // Set pixel_x and pixel_y during active video region
            if (video_on) begin
                x <= h_count;
                y <= v_count;
            end else begin
                x <= 0;
                y <= 0;
            end
        end
    end

endmodule
